#created by Yice Luo
import keras
from keras.datasets import cifar10
from keras.models import Sequential, load_model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import InputLayer, Conv2D, MaxPooling2D
from keras import backend as K
import matplotlib.pyplot as plt
from keras.optimizers import Adam
import os
batch_size = 128   
epochs = 5 
img_rows, img_cols = 32, 32
(X_train, y_train), (X_test, y_test) = cifar10.load_data()
#There are 10 categories.
if K.image_data_format() == 'channels_first':
    X_train = X_train.reshape(X_train.shape[0], 3, img_rows, img_cols)
    X_test = X_test.reshape(X_test.shape[0], 3, img_rows, img_cols)
else: 
    X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 3)
    X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 3)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255
X_train, X_val = X_train[0:45000,:,:,:], X_train[-5000:,:,:,:]
y_train, y_val = y_train[0:45000], y_train[-5000:]

print('X_train shape:', X_train.shape)
print('y_train shape:', y_train.shape)
print('X_test shape:', X_test.shape)
print('t_test shape:', X_test.shape)

print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')
print(X_val.shape[0], 'validation samples')
#The number of samples and the size of the image are shown above.
y_train_vec = y_train
y_test_vec = y_test
y_val_vec = y_val
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
y_val = keras.utils.to_categorical(y_val, num_classes)
#Show 9 sample images from your training set.
def plot_images(images, label, pred=None):
    if pred is None:
        try:
            assert images.shape[0] == len(label) == 9
        except AssertionError:
            images = images[0:9,:,:,:]
            label = label[0:9]
            print('Select the first 9 images')
    else:
        try:
            assert images.shape[0] == len(label) == len(pred) == 9
        except AssertionError:
            images = images[0:9,:,:,:]
            label = label[0:9]
            pred = pred[0:9]
            print('Select the first 9 images')
            
    fig, axes = plt.subplots(3,3)
    for i, ax in enumerate(axes.flat):
        # Plot image
        ax.imshow(images[i].reshape([img_rows, img_cols,3]))
        if pred is None:
            xlabel = "True: %d" % label[i]
        else:
            xlabel = "True: %d, Pred: %d" % (label[i], pred[i])
        ax.set_xlabel(xlabel)
        ax.set_xlabel(xlabel)
        
        ax.set_xticks([])
        ax.set_yticks([])   
    plt.show()
    
plot_images(X_train, y_train_vec)
#airplane : 0 automobile : 1 bird : 2 cat : 3 deer : 4 dog : 5 frog : 6
horse : 7 ship : 8 truck : 9
#Train a CNN with 2 convolutional layer and 1 fully-connected layer.
learning_rate = 1e-3
model = Sequential()
# input layer
model.add(InputLayer(input_shape=(img_rows, img_cols, 3, )))
model.add(Conv2D(48, kernel_size=3,
                 activation='relu',
                 padding='same',
                 name = 'layer_conv_1'))
model.add(Conv2D(96, kernel_size=3,
                 activation='relu',
                 padding='same',
                 name = 'layer_conv_2'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(96, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=Adam(lr=learning_rate),
              metrics=['accuracy'])
model.summary()
model.fit(X_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(X_val, y_val))
score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
#Tuning using Skopt package
from keras.callbacks import TensorBoard
from skopt import gp_minimize, dump, load
from skopt.space import Real, Integer
from skopt.plots import plot_convergence
from skopt.utils import use_named_args
def create_model(learning_rate, kernel_size, num_dense_layers):
    model = Sequential()
    model.add(InputLayer(input_shape=(img_rows, img_cols, 3, )))
    model.add(Conv2D(48, kernel_size=int(kernel_size),
                 activation='relu',
                 padding='same',
                 name = 'layer_conv_1'))
    model.add(Conv2D(96, kernel_size=int(kernel_size),
                 activation='relu',
                 padding='same',
                 name = 'layer_conv_2'))
    model.add(MaxPooling2D(pool_size=2, strides=2))
    model.add(Flatten())
    for i in range(num_dense_layers):
        name = 'layer_dense_{0}'.format(i+1)
        model.add(Dense(96,
                        activation='relu',
                        name=name))
    model.add(Dense(num_classes, activation='softmax'))

    model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=Adam(learning_rate),
              metrics=['accuracy'])    
    return model
def log_dir_name(learning_rate,
                 kernel_size,
                 num_dense_layers):
    s = os.path.join(log_path, "lr_{0:.0e}_kernel_{1}_dense_{2}/")
    log_dir = s.format(learning_rate,
                       kernel_size,
                       num_dense_layers)
    return log_dir
dim_learning_rate = Real(low=1e-4, high=1e-2, prior='log-uniform',
                             name='learning_rate')
dim_kernel_size = Integer(low=3, high=5, name='kernel_size')
dim_num_dense_layers = Integer(low=2, high=4, name='num_dense_layers')
dimensions = [dim_learning_rate, dim_kernel_size, dim_num_dense_layers]
log_path = './mnist_skopt_log/'
if not os.path.exists(log_path):
    os.makedirs(log_path)
result_path = './mnist_skopt_result/'
if not os.path.exists(result_path):
    os.makedirs(result_path)
path_best_model = os.path.join(result_path+'best_model.keras')
best_accuracy = 0.0
@use_named_args(dimensions=dimensions)
def fitness(learning_rate, kernel_size, num_dense_layers):
    print('learning rate: {0:.1e}'.format(learning_rate))
    print('kernel_size:', kernel_size)
    print('num_dense_layers:', num_dense_layers)
    print()
    model = create_model(learning_rate, kernel_size,  num_dense_layers)
    log_dir = log_dir_name(learning_rate, kernel_size,  num_dense_layers)
    
    callback_log = TensorBoard(
        log_dir=log_dir,
        histogram_freq=0,
        batch_size=32,
        write_graph=True,
        write_grads=False,
        write_images=False)
    history = model.fit(X_train, y_train,
                        batch_size=batch_size,
                        epochs=epochs,
                        verbose=1,
                        validation_data=(X_val, y_val),
                        callbacks=[callback_log])
    accuracy = history.history['val_acc'][-1]
    print()
    print("Accuracy: {0:.2%}".format(accuracy))
    print()
    global best_accuracy

    if accuracy > best_accuracy:
        model.save(path_best_model)
        best_accuracy = accuracy

    del model
    
    K.clear_session()
    return -accuracy
default_parameters = [1e-4, 3, 2]
search_result = gp_minimize(func=fitness,
                            dimensions=dimensions,
                            acq_func='EI', 
                            n_calls=12,
                            x0=default_parameters)
search_result.x
sorted(zip(-search_result.func_vals, search_result.x_iters), reverse=True)
#The optimal hyperparameters are learning rate=0.0007543026671393727, kernel size = 4,
# number of dense layers = 3. The test accuracy is 71%.
plot_convergence(search_result)
